{"name":"elaps'd","tagline":"elaps'd -- application run-time analysis with ease","body":"elaps'd\r\n=======\r\n\r\nelaps'd (say: *elapsed*) is a tool for analyzing the run-time of your\r\napplication. It currently supports multi-threaded applications written in C, C++\r\nor FORTRAN. But wait, there is more: it also provides a web-based for visual\r\nanalysis of the recorded data:\r\n\r\n![elaps'd screenshot](https://raw.github.com/sdressler/elapsd/master/doc/elapsd.png)\r\n\r\nCurrently, one has to manually utilize elaps'd in the application. However, the\r\nplan is to automate this in future, so the user only has to label functions to\r\nbe measured.\r\n\r\nTL;DR Usage Summary\r\n-------------------\r\n\r\n_Definitions:_ Kernel -> The function you want to measure; Device -> The device\r\nthe function runs on (e.g. CPU, GPU, CPU + GPU, ...).\r\n\r\n1. Build with `make`\r\n2. Have a look at the examples\r\n3. Incorporate elaps'd into your application and generate some DB's\r\n4. Use the analyzer by issuing `python analyzer.py` and opening\r\n   <http://localhost:8080> in your browser\r\n\r\nLarge Developer's Request: Please report Bugs/Improvement Wishes at GitHub.\r\n\r\nRequirements\r\n------------\r\n\r\n* For the backend, i.e. the measuring part\r\n    - C++ compiler with C++03 support\r\n    - SQLite (>= 3.6)\r\n    - OpenMP\r\n    - A C or FORTRAN compiler if you want to build these APIs\r\n\r\n* For the frontend, i.e. the visualization part\r\n    - Python\r\n    - apsw for your version of SQLite\r\n    - Flask\r\n    - HTML5 Browser (best: Google Chrome or Chromium)\r\n\r\nBuild\r\n-----\r\n\r\n1. Open `Makefile.include` in your favorite editor and adapt settings as\r\n   necessary. No changes are needed most of the time.\r\n2. Type `make` in the root of elaps'd directory. This builds the library\r\n   `libelapsd.so` inside `lib` and the examples inside `examples`.\r\n3. If you want to install it, copy headers and library (sorry about the manual\r\n   step! I'll change this in near future).\r\n\r\nUsage\r\n-----\r\n\r\n### Create Measurements (Backend)\r\n\r\nThis is a short summary on how to use the backend. Please have a look at the\r\nprovided examples for more details.\r\n\r\n1. Include `elapsd/elapsd.h` for C++, `elapsd/celapsd.h` for C. For FORTRAN, use\r\n   `elapsd/m_elapsd.mod`. All these are in the `include` directory.\r\n2. Initialize elaps'd. C++ users simply do e.g. `ENHANCE::elapsd e(\"elapsd.db\",\r\n   \"Experiment Name\");` (watch out for the namespace!). C users call\r\n   `elapsdInit`, so do FORTRAN users.\r\n3. Use `addKernel` and `addDevice` function calls to add kernels and devices.\r\n4. Use `startTimer` and `stopTimer` to start and stop measurements. Please\r\n   consider that `startTimer` must be called prior `stopTimer` and that to every\r\n   `startTimer` a `stopTimer` belongs.\r\n5. Once you finished all measurements call `std::cout << e << \"\\n\"` for\r\n   summarized output and/or the `commitToDB()` function to write the data to\r\n   SQLite for further analysis.\r\n\r\n### Use the Analyzer (Frontend)\r\n\r\n1. Copy the generated DB to `static/db` which is inside the `analyzer`\r\n   directory. This step will be relaxed in near future letting you configure the\r\n   path to the DB's.\r\n2. Start the analyzer's integrated Flask-based webserver by calling `python\r\n   analyzer.py`.\r\n3. Open your favorite browser (I recommend Google Chrome or Chromium for best\r\n   user experience) and point it to <http://localhost:8080>\r\n4. Select the DB you want to work with and start analyzing!\r\n\r\nChangelog\r\n---------\r\n\r\n### 2013-05-31 -- v0.1\r\n* Initial release\r\n\r\nAuthor information\r\n------------------\r\n\r\n* Author: Sebastian Dre√üler\r\n* Company: Zuse Institute Berlin\r\n* Mail: [lastname][at][zib][dot][de]\r\n\r\nelaps'd is developed as part of the ENHANCE project (for further info visit\r\nhttp://www.enhance-project.de) which is funded by German ministry for education\r\nand reserach (BMBF). BMBF grant no.: 01IH11004A-G\r\n\r\nLicense\r\n-------\r\n\r\nelaps'd an all self-written parts of it is licensed under the 3-clause BSD\r\nlicense. The full license text is provided in the file LICENSE.\r\n\r\nDisclaimer\r\n---------\r\n\r\nThis software is currently in a very early stadium. There is no guarantee that\r\nmeasurements are consistently correct and that there are no major bugs.\r\n","google":"UA-32364726-2","note":"Don't delete this file! It's used internally to help with page regeneration."}